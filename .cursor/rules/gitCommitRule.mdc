---
description: 
globs: 
alwaysApply: false
---

---
description: Git Commit Rule
globs: *
---

# GIT COMMIT PROTOCOL

> **TL;DR:** Write clear, atomic commits using `type(scope): message` format in present tense, imperative mood.

## üìù COMMIT FORMAT

```
type(scope): message

[optional body]

[optional footer]
```

## üè∑Ô∏è COMMIT TYPES

- **feat**: New feature
- **fix**: Bug fix
- **docs**: Documentation
- **style**: Formatting
- **refactor**: Code restructure
- **test**: Testing
- **chore**: Maintenance

## ‚úÖ COMMIT RULES

1. **Message Structure**
   - Present tense ("add" not "added")
   - Imperative mood ("move" not "moves")
   - No period at end
   - 50 chars or less

2. **Body (Optional)**
   - Blank line after subject
   - Wrap at 72 chars
   - Explain what and why

3. **Scope (Optional)**
   - Component affected
   - Lowercase, no spaces
   - Use consistent names

## üí° VALID EXAMPLES

```
feat(auth): add Google sign-in option
fix(api): handle null response from server
docs(readme): update installation steps
style(components): format according to style guide
refactor(database): optimize query performance
test(utils): add unit tests for date functions
chore(deps): update dependencies to latest
```

## üö´ INVALID EXAMPLES

```
‚ùå fixed bug                    # No type
‚ùå feat: Added new feature     # Past tense
‚ùå style(HEADER): Changed CSS  # Uppercase scope
‚ùå docs: updated docs.         # Period at end
‚ùå feat: implement...very...long...commit...message  # Too long
```

## üîÑ WORKFLOW

1. **Stage Changes**
   ```bash
   git add <files>
   ```

2. **Write Commit**
   ```bash
   git commit
   ```

3. **Push Changes**
   ```bash
   git push
   ```

## ‚ö†Ô∏è SAFETY

- One logical change per commit
- No sensitive data in messages
- Verify staged files before commit
- Use .gitignore for secrets

## ‚úì VERIFICATION

Before committing, verify:
- [ ] Correct type selected
- [ ] Scope is appropriate
- [ ] Message follows format
- [ ] Changes are atomic
- [ ] No sensitive data

# Git Conventional Commits
 
Rule for automatically committing changes made by CursorAI using conventional commits format.
 
<rule>
name: conventional_commits
description: Automatically commit changes made by CursorAI using conventional commits format
filters:
  - type: event
    pattern: "build_success"
  - type: file_change
    pattern: "*"
 
actions:
  - type: execute
    command: |
      # Extract the change type and scope from the changes
      CHANGE_TYPE=""
      case "$CHANGE_DESCRIPTION" in
        *"add"*|*"create"*|*"implement"*) CHANGE_TYPE="feat";;
        *"fix"*|*"correct"*|*"resolve"*) CHANGE_TYPE="fix";;
        *"refactor"*|*"restructure"*) CHANGE_TYPE="refactor";;
        *"test"*) CHANGE_TYPE="test";;
        *"doc"*|*"comment"*) CHANGE_TYPE="docs";;
        *"style"*|*"format"*) CHANGE_TYPE="style";;
        *"perf"*|*"optimize"*) CHANGE_TYPE="perf";;
        *) CHANGE_TYPE="chore";;
      esac
 
      # Extract scope from file path
      SCOPE=$(dirname "$FILE" | tr '/' '-')
 
      # Commit the changes
      git add "$FILE"
      git commit -m "$CHANGE_TYPE($SCOPE): $CHANGE_DESCRIPTION"
 
  - type: suggest
    message: |
      Changes should be committed using conventional commits format:
 
      Format: <type>(<scope>): <description>
 
      Types:
      - feat: A new feature
      - fix: A bug fix
      - docs: Documentation only changes
      - style: Changes that do not affect the meaning of the code
      - refactor: A code change that neither fixes a bug nor adds a feature
      - perf: A code change that improves performance
      - test: Adding missing tests or correcting existing tests
      - chore: Changes to the build process or auxiliary tools
 
      The scope should be derived from the file path or affected component.
      The description should be clear and concise, written in imperative mood.
 
examples:
  - input: |
      # After adding a new function
      CHANGE_DESCRIPTION="add user authentication function"
      FILE="src/auth/login.ts"
    output: "feat(src-auth): add user authentication function"
 
  - input: |
      # After fixing a bug
      CHANGE_DESCRIPTION="fix incorrect date parsing"
      FILE="lib/utils/date.js"
    output: "fix(lib-utils): fix incorrect date parsing"
 
metadata:
  priority: high
  version: 1.0
</rule>